def VERIFICATION_GROUP = 'Verification'

apply plugin: 'com.android.application'
apply plugin: 'checkstyle'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"
    ndkVersion '21.3.6528147'

    defaultConfig {
        applicationId "ca.raido.glSatelliteDemo"
        minSdkVersion 22
        targetSdkVersion 30
        versionCode 2
        versionName "1.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
        }
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_PLATFORM=android-14',
                        '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=c++_static'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

    lintOptions {
        disable 'TypographyDashes'
    }
}

repositories {
    maven { url "https://maven.google.com" }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'com.squareup.leakcanary:leakcanary-android:1.5.1'

    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

task checkstyle(type: Checkstyle) {
    group VERIFICATION_GROUP
    description 'Checks the style of Java sources.'

    showViolations = true
    configFile file("checkstyle.xml")

    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    // empty classpath
    classpath = files()
}

task infer(type: Exec) {
    group VERIFICATION_GROUP
    description 'Runs Infer check.'

    def inferCmd = 'infer'
    onlyIf {
        !"which $inferCmd".execute().waitFor()
    }
    def inferOpts = ['-o', "$buildDir/infer-out"]
    def gradleCmd = ['gradle', 'build', '--rerun-tasks']
    def cmd = [inferCmd] + inferOpts + ['--'] + gradleCmd
    commandLine(*cmd)
}

task tests(dependsOn: [check, infer, 'checkstyle']) {
    group VERIFICATION_GROUP
    description 'Runs all tests.'
}
